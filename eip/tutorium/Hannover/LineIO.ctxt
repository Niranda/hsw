#BlueJ class context
comment0.params=
comment0.target=LineIO()
comment0.text=\r\n\ Es\ wird\ ein\ IO-Objekt\ erzeugt,\ an\ das\ alle\ Methoden\ gesendet\ werden\r\n
comment1.params=noLines
comment1.target=void\ emptyLines(int)
comment1.text=\r\n\ Ausgabe\ von\ einer\ bestimmten\ Anzahl\ von\ Leerzeilen\r\n\ @param\ noLines\ \ \ \ Anzahl\ der\ Leezeilen,\ die\ erzeugt\ werden\r\n
comment10.params=bool
comment10.target=void\ writeln(boolean)
comment10.text=\r\n\ Ausgabe\ eines\ logischen\ Wertes\ mit\ Zeilenvorschub\r\n\ @param\ \ bool\ \ \ logischer\ Wert,\ der\ ausgegeben\ wird\r\n
comment11.params=object
comment11.target=void\ writeln(java.lang.Object)
comment11.text=\r\n\ Ausgabe\ eines\ Objecktes\ mit\ Zeilenvorschub\r\n\ An\ das\ Objekt\ wird\ die\ toString-Methode\ gesendet\r\n\ @param\ \ object\ \ \ Objekt,\ das\ ausgegeben\ wird\r\n
comment12.params=
comment12.target=void\ writeln()
comment12.text=\r\n\ Ausgabe\ eines\ Zeilenvorschubs\r\n
comment13.params=integer\ anzahl
comment13.target=void\ write(int,\ int)
comment13.text=\r\n\ Ausgabe\ einer\ ganzen\ Zahl\ ohne\ Zeilenvorschub\:\r\n\ schreibt\ die\ ganzez\ Zahl\ integer\ rechtsb\uFFFDndig\ in\ insgesamt\ 'anzahl'\r\n\ viele\ Positionen(Zeichen/Spalten)\r\n\ Es\ werden\ mehr\ Positionen\ verbraucht,\ wenn\ das\ angegebene\ Format\r\n\ nicht\ reicht,\ die\ Zahl\ zu\ fassen\r\n\ @param\ integer\ \ ganze\ Zahl,\ die\ ausgegeben\ wird\r\n\ @param\ spalten\ \ Anzahl\ der\ Spalten,\ die\ f\uFFFDr\ die\ Ausgabe\ benutzt\ werden\r\n
comment14.params=integer\ anzahl
comment14.target=void\ writeln(int,\ int)
comment14.text=\r\n\ Ausgabe\ einer\ ganzen\ Zahl\ MIT\ Zeilenvorschub\:\r\n\ schreibt\ die\ ganzez\ Zahl\ integer\ rechtsb\uFFFDndig\ in\ insgesamt\ 'anzahl'\r\n\ viele\ Positionen(Zeichen/Spalten)\r\n\ Es\ werden\ mehr\ Positionen\ verbraucht,\ wenn\ das\ angegebene\ Format\r\n\ nicht\ reicht,\ die\ Zahl\ zu\ fassen\r\n\ @param\ integer\ \ ganze\ Zahl,\ die\ ausgegeben\ wird\r\n\ @param\ spalten\ \ Anzahl\ der\ Spalten,\ die\ f\uFFFDr\ die\ Ausgabe\ benutzt\ werden\r\n
comment15.params=value\ noChar\ noFrac
comment15.target=void\ write(double,\ int,\ int)
comment15.text=\r\n\ Ausgabe\ einer\ Festkommazahl\ ohne\ Zeilenvorschub\:\r\n\ schreibt\ die\ Kommazahl\ value\ rechtsb\uFFFDndig\ in\ insgesamt\ noChar\ viele\r\n\ Spalten\ (Zeichen/Positionen)\ mit\ noFrac\ Nachkommastellen;\r\n\ verbraucht\ mehr\ Spalten,\ falls\ die\ angegebene\ Zahl\ der\ Zeichen\r\n\ nicht\ ausreicht,\ die\ Zahl\ zu\ fassen\r\n\ Zur\ Beschraenkung\ von\ write/3\ siehe\ API\ toString/1\ der\ Klasse\ Double\r\n\ @param\ integer\ \ ganze\ Zahl,\ die\ ausgegeben\ wird\r\n\ @param\ noChar\ \ \ Anzahl\ der\ Spalten,\ die\ f\uFFFDr\ die\ Ausgabe\ benutzt\ werden\r\n\ @param\ noFrac\ \ \ Anzahl\ der\ Ziffern\ nach\ dem\ Komma\r\n
comment16.params=value\ noChar\ noFrac
comment16.target=void\ writeln(double,\ int,\ int)
comment16.text=\r\n\ Ausgabe\ einer\ Festkommazahl\ MIT\ Zeilenvorschub\:\r\n\ schreibt\ die\ Kommazahl\ value\ rechtsb\uFFFDndig\ in\ insgesamt\ noChar\ viele\r\n\ Spalten\ (Zeichen/Positionen)\ mit\ noFrac\ Nachkommastellen;\r\n\ verbraucht\ mehr\ Spalten,\ falls\ die\ angegebene\ Zahl\ der\ Zeichen\r\n\ nicht\ ausreicht,\ die\ Zahl\ zu\ fassen\r\n\ Zur\ Beschraenkung\ von\ write/3\ siehe\ API\ toString/1\ der\ Klasse\ Double\r\n\ @param\ integer\ \ ganze\ Zahl,\ die\ ausgegeben\ wird\r\n\ @param\ noChar\ \ \ Anzahl\ der\ Spalten,\ die\ f\uFFFDr\ die\ Ausgabe\ benutzt\ werden\r\n\ @param\ noFrac\ \ \ Anzahl\ der\ Ziffern\ nach\ dem\ Komma\r\n
comment17.params=string
comment17.target=java.lang.String\ readString(java.lang.String)
comment17.text=\r\n\ Gibt\ die\ Aufforderung\ string\ aus\ und\ liest\ anschlie\uFFFDend\ einen\ vom\r\n\ Benutzer\ eingegebene\ Zeichenkette\ ein;\r\n\ @param\ \ string\ \ Zeichenkette,\ die\ ausgegeben\ wird\r\n\ @return\ eingegebene\ Zeichenkette\r\n
comment18.params=string
comment18.target=int\ readInt(java.lang.String)
comment18.text=\r\n\ Gibt\ die\ Aufforderung\ string\ aus\ und\ liest\ anschlie\uFFFDend\ einen\ vom\r\n\ Benutzer\ eingegebene\ ganze\ Zahl\ (int)\ ein;\r\n\ @param\ \ string\ \ \ Zeichenkette,\ die\ ausgegeben\ wird\r\n\ @return\ eingegebene\ Zahl,\ Abbruch\ bei\ fehlerhafter\ Eingabe\r\n
comment19.params=string
comment19.target=char\ readChar(java.lang.String)
comment19.text=\r\n\ Gibt\ die\ Aufforderung\ string\ aus\ und\ liest\ anschlie\uFFFDend\ ein\ vom\r\n\ Benutzer\ eingegebenes\ Zeichen\ ein;\ Wird\ nur\ <Enter>\ ggedr\uFFFDckt,\ wird\ ein\r\n\ Leerzeichen\ zur\uFFFDck\ gegeben.\r\n\ @param\ \ string\ \ \ Zeichenkette,\ die\ ausgegeben\ wird\r\n\ @return\ eingegebenes\ Zeichen\r\n
comment2.params=string
comment2.target=void\ write(java.lang.String)
comment2.text=\r\n\ Ausgabe\ eines\ Zeichenketten-Wertes\ ohne\ Zeilenvorschub\r\n\ @param\ \ string\ \ \ Zeichenkette,\ die\ ausgegeben\ wird\r\n
comment20.params=string
comment20.target=double\ readDouble(java.lang.String)
comment20.text=\r\n\ Gibt\ die\ Aufforderung\ string\ aus\ und\ liest\ anschlie\uFFFDend\ ein\ vom\r\n\ Benutzer\ eingegebene\ Zahl\ ein;\r\n\ @param\ \ string\ \ \ Zeichenkette,\ die\ ausgegeben\ wird\r\n\ @return\ eingegebene\ Zahl\r\n
comment21.params=string
comment21.target=float\ readFloat(java.lang.String)
comment21.text=\r\n\ Gibt\ die\ Aufforderung\ string\ aus\ und\ liest\ anschlie\uFFFDend\ ein\ vom\r\n\ Benutzer\ eingegebene\ Zahl\ ein;\r\n\ @param\ \ string\ \ \ Zeichenkette,\ die\ ausgegeben\ wird\r\n\ @return\ eingegebene\ Zahl\r\n
comment3.params=character
comment3.target=void\ write(char)
comment3.text=\r\n\ Ausgabe\ eines\ Zeichen-Wertes\ ohne\ Zeilenvorschub\r\n\ @param\ \ character\ \ \ Zeichen,\ das\ ausgegeben\ wird\r\n
comment4.params=integer
comment4.target=void\ write(int)
comment4.text=\r\n\ Ausgabe\ eines\ int-Wertes\ ohne\ Zeilenvorschub\r\n\ @param\ \ integer\ \ \ ganze\ Zahl,\ die\ ausgegeben\ wird\r\n
comment5.params=bool
comment5.target=void\ write(boolean)
comment5.text=\r\n\ Ausgabe\ eines\ logischen\ Wertes\ ohne\ Zeilenvorschub\r\n\ @param\ \ bool\ \ \ logischer\ Wert,\ der\ ausgegeben\ wird\r\n
comment6.params=object
comment6.target=void\ write(java.lang.Object)
comment6.text=\r\n\ Ausgabe\ eines\ beliebigen\ Objektes\ ohne\ Zeilenvorschub\r\n\ Das\ Objekt\ wird\ per\ toString()\ in\ eine\ Zeichenkette\ umgewandelt\r\n\ @param\ \ object\ \ \ ,\ Objekt,\ das\ ausgegeben\ wird.\r\n
comment7.params=string
comment7.target=void\ writeln(java.lang.String)
comment7.text=\r\n\ Ausgabe\ eines\ Zeichenketten-Wertes\ mit\ Zeilenvorschub\r\n\ @param\ \ string\ \ \ Zeichenkette,\ die\ ausgegeben\ wird\r\n
comment8.params=character
comment8.target=void\ writeln(char)
comment8.text=\r\n\ Ausgabe\ eines\ Zeichen-Wertes\ mit\ Zeilenvorschub\r\n\ @param\ \ character\ \ Zeichen,\ das\ ausgegeben\ wird\r\n
comment9.params=integer
comment9.target=void\ writeln(int)
comment9.text=\r\n\ Ausgabe\ eines\ int-Wertes\ mit\ Zeilenvorschub\r\n\ @param\ \ integer\ \ ganze\ Zahl,\ die\ ausgegeben\ wird\r\n
numComments=22
